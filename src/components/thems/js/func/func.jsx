import { useState } from "react";
import { Cart } from "../../../function/cart/carts";
import { handleSet } from "../../../function/localStorage";

function Function() {
  const [ok, setOk] = useState([]);
  const [set, setSet] = useState(false)
  const functions = [
    {
      title: "Функции",
      desc: `Функции в JavaScript — это блоки кода, которые можно вызывать по имени, чтобы выполнить определённую задачу. Функции помогают организовать код, избегать повторений и улучшать читаемость.`,
    },
    {
      title: "Функции объявленные с помощью function",
      desc: `Функции, объявленные с помощью ключевого слова \`function\`, имеют функциональную область видимости и могут быть вызваны до их объявления (подъём функции). Такие функции могут быть объявлены и вызваны в любой части программы.`,
    },
    {
      title: "Стрелочные функции",
      desc: `Стрелочные функции, введённые в ES6, предоставляют короткий синтаксис для написания функций. Они не имеют собственного контекста \`this\`, что полезно в некоторых случаях. Формат: \`(параметры) => выражение\`.`,
    },
    {
      title: "Замыкания",
      desc: `Замыкания — это функция, которая сохраняет доступ к переменным своей внешней функции даже после того, как внешняя функция завершила выполнение. Это позволяет создавать функции с приватными данными.`,
    },
    {
      title: "Рекурсивные функции",
      desc: `Рекурсивные функции — это функции, которые вызывают сами себя. Они полезны для решения задач, которые можно разбить на подзадачи, аналогичные основной задаче.`,
    },
    {
      title: "Функции обратного вызова (callback functions)",
      desc: `Функции обратного вызова — это функции, передаваемые в другие функции в качестве аргументов. Они вызываются по завершению какого-либо действия или события.`,
    },
    {
      title: "Оператор spread",
      desc: `Оператор \`...\` (spread) позволяет разворачивать элементы массива или объекта в места, где ожидаются нуль или более аргументов (для массивов) или пар ключ-значение (для объектов).`,
    },
    {
      title: "REST-оператор",
      desc: `REST-оператор \`...\` (rest) используется для сбора оставшихся аргументов функции в массив. Он позволяет собирать неопределённое количество аргументов в функции в один массив. REST-оператор применяется в определении функции и указывается в конце списка параметров.`,
    },
  ];
  

  const handleClick = (i) => {
    if (ok.includes(i)) {
      setOk(ok.filter((index) => index !== i));
    } else {
      setOk([...ok, i]);
    }
  };

  const toLocal =() => {
    handleSet("functions", ok, functions)
    setSet(true)
  }

  return (
    <div className="varible-container">
      <div className="inner">
        <div className="carts">
          {functions.map((item, index) => (
            <Cart
              key={index}
              title={item.title}
              desc={item.desc}
              ok={ok.includes(index)}
              onClick={() => handleClick(index)}
            />
          ))}
        </div>
      </div>

      <div className="answers">
        <h2>
          Правильные ответы " {ok.length} из {functions.length} "
        </h2>
        <button style={{ display: set ? 'none' : 'block' }} onClick={toLocal}>
          Дальше
        </button>
      </div>
    </div>
  );
}

export { Function };
