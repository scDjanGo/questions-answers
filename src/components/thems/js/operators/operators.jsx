import { useState } from "react";
import { Cart } from "../../../function/cart/carts";
import { handleSet } from "../../../function/localStorage";
import { useNavigate } from "react-router-dom";
import {useStartEffect,useTrueAnswers,handleClick,} from "../../../function/startEffect";

function Operators() {
  const [ok, setOk] = useState([]);
  const nav = useNavigate()
  const [truAnswer, setTruAnswer] = useState(0);
  const [passed, setPassed] = useState(false);

  const operators = [
    {
      title: "Арифметические операторы",
      desc: `Арифметические операторы используются для выполнения математических операций над числами. 
             Основные арифметические операторы включают:
             - \`+\` (плюс): сложение
             - \`-\` (минус): вычитание
             - \`*\` (умножение): умножение
             - \`/\` (деление): деление
             - \`%\` (остаток от деления): деление с остатком
             - \`**\` (возведение в степень): возведение числа в степень.`,
    },
    {
      title: "Операторы сравнения",
      desc: `Операторы сравнения используются для сравнения двух значений и возвращают булевое значение (\`true\` или \`false\`).
             Основные операторы сравнения включают:
             - \`==\` (равенство): проверяет, равны ли два значения, игнорируя тип
             - \`===\` (строгое равенство): проверяет, равны ли два значения, включая тип
             - \`!=\` (неравенство): проверяет, не равны ли два значения, игнорируя тип
             - \`!==\` (строгое неравенство): проверяет, не равны ли два значения, включая тип
             - \`>=\` (больше или равно): проверяет, больше ли или равно ли одно значение другому
             - \`<=\` (меньше или равно): проверяет, меньше ли или равно ли одно значение другому.`,
    },
    {
      title: "Логические операторы",
      desc: `Логические операторы используются для комбинирования логических значений и возвращают логический результат.
             Основные логические операторы включают:
             - \`&&\` (логическое И): возвращает \`true\`, если оба операнда истинны
             - \`||\` (логическое ИЛИ): возвращает \`true\`, если хотя бы один из операндов истинен
             - \`!\` (логическое НЕ): возвращает \`true\`, если операнд ложен, и \`false\`, если операнд истинен.`,
    },
    {
      title: "Операторы присваивания",
      desc: `Операторы присваивания используются для присваивания значений переменным и могут выполнять дополнительные операции.
             Основные операторы присваивания включают:
             - \`=\` (присваивание): присваивает значение переменной
             - \`+=\` (прибавить и присвоить): прибавляет значение к текущему значению переменной и присваивает результат
             - \`-=\` (вычесть и присвоить): вычитает значение из текущего значения переменной и присваивает результат
             - \`*=\` (умножить и присвоить): умножает текущее значение переменной на заданное значение и присваивает результат
             - \`/=\` (разделить и присвоить): делит текущее значение переменной на заданное значение и присваивает результат
             - \`%=\` (остаток от деления и присвоить): находит остаток от деления текущего значения переменной на заданное значение и присваивает результат.`,
    },
    {
      title: "Операторы инкремента и декремента",
      desc: `Операторы инкремента и декремента используются для увеличения или уменьшения значения переменной на единицу.
             Основные операторы включают:
             - \`++\` (инкремент): увеличивает значение переменной на единицу
             - \`--\` (декремент): уменьшает значение переменной на единицу
             Операторы могут быть использованы в постфиксной (например, \`x++\`) или префиксной (например, \`++x\`) форме.`,
    },
    {
      title: "Тернарный оператор",
      desc: `Тернарный оператор — это короткая форма записи условного выражения. Он имеет три операнда и возвращает значение в зависимости от условия.
             Формат: \`условие ? значение_если_true : значение_если_false\`.
  
             Пример: \`let result = (a > b) ? 'a больше b' : 'a не больше b';\``,
    },
  ];
  


  // startEffect functions
  useStartEffect("Операторы", operators, setOk, setPassed);
  useTrueAnswers(ok, setTruAnswer);

  const handlePassed = () => {
    setPassed((prev) => !prev);
  };

  const toLocal = () => {
    handleSet("Операторы", ok);
    handlePassed();
    nav("/js/loop");
  };

  return (
  <>
  {passed && (
  <div className="answers top">
    <>
    <button onClick={() => { handlePassed()}}>
      Перепройти
    </button>
    <h2>Правильные ответы " {truAnswer} из {operators.length} "</h2>
    </>
  </div>
  )}
  <div className="varible-container">
    <div className="inner">
      <div className="carts">
        {operators.map((item, index) => (
          <Cart
            key={index}
            title={item.title}
            desc={item.desc}
            ok={ok[index]}
            onClick={() => {(!passed && handleClick(index, setOk))}}
          />
        ))}
      </div>
    </div>

    <div className="answers">
        { !passed &&
        <>
        <h2>Правильные ответы " {truAnswer} из {operators.length} "</h2>
        <button style={{ marginBottom: '50px' }} onClick={() => { toLocal(); }}>
          Дальше
        </button>
        </>
         }
      </div>
  </div>
  </>
  );
}

export { Operators };
